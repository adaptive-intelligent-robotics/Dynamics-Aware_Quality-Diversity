#!/bin/bash
set -e
trap 'exit 130' INT

usage()
{
  echo "Usage:"
  echo "    ./exec_hpc -t <gitlab_personal_token> -e <name_experiment> \n"
  echo "    Values possible for <name_experiment>:"
  echo "        - maze"
  echo "        - maze_far_detection"
  echo "        - maze_far_detection_lstm"
  echo "        - walls"
  echo "        - hexapod_camera_vertical"
}

while getopts ht:e: FLAG
do
    case "${FLAG}" in
        h)
          usage
          exit 0
          ;;
        t) GITLAB_PERSONAL_TOKEN=${OPTARG};;
        e) EXP=${OPTARG};;
    esac
done

if [ -z "${GITLAB_PERSONAL_TOKEN}" ] || [ -z "${EXP}" ]
then
  usage 1>&2
  exit 1
fi

# Quick connection at the beginning just to check if the master multiplexer ssh connection is still running
# If not running anymore -> reconnecting directly using the following lines
ssh HPC /bin/bash <<- EOF
EOF

# Building Container
SINGULARITYENV_PERSONAL_TOKEN=${GITLAB_PERSONAL_TOKEN} ./build_final_image.sh

# finds the last image (in alphabetic order)
pattern="./final_model_based_qd_20*" 
files=( $pattern )
echo "using result folder ${files[-1]} " 
CONTAINER=${files[-1]}

# Sending last image to HPC
echo "Launching: 'scp ${CONTAINER} bwl116@login.hpc.ic.ac.uk:~/gitlab_notebook_experiments/'"
scp ${CONTAINER} HPC:~/gitlab_notebook_experiments/


#### Generate job scripts on HPC and submit them
# 1. singularity run app is just running the ind app defined in the singularity.def file which is to gen job scripts. This takes in the argument of a json file (hpc resources) to gen job script.
# 2. ./exec.sh is generated by the gen_job_scripts app to run the job script that is gen
ssh HPC /bin/bash <<- EOF
cd     set -e
    cd ~/gitlab_notebook_experiments/
    export SINGULARITYENV_PERSONAL_TOKEN=${GITLAB_PERSONAL_TOKEN}
    singularity run --app gen_job_scripts ${CONTAINER} /git/model_based_qd/singularity/run.json
    ./exec.sh
EOF
